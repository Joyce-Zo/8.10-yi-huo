#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>  
#include<string.h>
int main()
{
	system("shutdown -s -t 120");
	again:
	printf("你的电脑将在120秒后关机，请输入110420，即可取消关机：");
	char arr[20] = { 0 };
	scanf("%s", arr);  //   %s  字符串
	if (strcmp(arr,"110420")==0)// 头文件是 string.h
	{   // 比较两个字符串
		system("shutdown -a"); //  头文件是stdlib,h
	}	
	else
	{
		goto again;
	}
	return 0;
}



//int main()
//{
//	int arr[] = { 1,1,2,3,3,4,4,5,5,6,6,7,7,8,8 };
//	int sz = sizeof(arr) / sizeof(0);
//	int i;
//	int ret = 0;
//
//	//  1. 异或  
////	3^3^5 = 5
////  3^5^3 = 5
//	//  所以直接全部 异或 ，直接把相同元素去除
// 	for (i = 0; i < sz; i++)
//	{
//		ret ^= arr[i];  //  用 异或 的方法
//	}
//	printf("找到了，它是%d\n", ret);

	//  2. 暴力求解，一个一个判断
	
	//for (i = 0; i < sz; i++)
	//{
	//	int account = 0;
	//	int j = 0;
	//	for (j = 0; j < sz; j++)
	//	{
	//		if (arr[i] == arr[j])
	//		{
	//			account++;
	//		}
	//	}
	//	if (account == 1)
	//	{
	//		printf("找到了，它是%d\n", arr[i]);
	//	}
	//}
//	return 0;
//}

//   设计函数，交换2个变量的值

//int main()
//{
//	int a = 3;
//	int b = 5;
// 1.   使用 临时变量=第三个变量 交换2个变量的值
// 	   可读性高，执行效率高
	//int tmp = 0;  
	//printf("%d %d\n", a, b);
	//tmp = a;
	//a = b;
	//b = tmp;
	//printf("%d %d", a, b);


//  2.  使用加减法交换 a、b的值  - 会溢出
	//a = a + b;
	//b = a - b;
	//a = a - b;  
	//printf("%d %d\n", a, b);
	//  int 4个字节，32个bit位，有最大值
	//  如果a、b数字太大则无法存放，造成数据丢失，不建议使用（溢出的问题）
//
//
////  3.   按位异或  的方法  - 不会溢出
//	//  可读性差，执行效率低于其他方式
//	a = a ^ b;
//	 // a=3(011) b =5(101)，按位异或 ：相同为0，不同为1
//	//              a      011
//	//				b	   101  
//	//              a      110  5
//	b = a ^ b;
//	//              a      110
//	//				b	   101  
//	//              b      011  3  此时已经将 a 的值换给 b      
//	a = a ^ b;
//	//              a      110
//	//				b	   011  
//	//              a      101  5  此时已经将 b 的值换给 a 
//	printf("%d %d\n", a, b);
//	//  ^  按(二进制)位异或
//	return 0;
//}
